// Copyright 2017-2019 VMware, Inc.
// SPDX-License-Identifier: BSD-2-Clause
//
// The BSD-2 license (the License) set forth below applies to all parts of the
// Cascade project.  You may not use this file except in compliance with the
// License.
//
// BSD-2 License
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef CASCADE_SRC_TARGET_CORE_STATE_H
#define CASCADE_SRC_TARGET_CORE_STATE_H

#include <unordered_map>
#include "src/base/bits/bits.h"
#include "src/base/container/vector.h"
#include "src/base/serial/serializable.h"
#include "src/runtime/ids.h"

namespace cascade {

// This class is a target-angnostic representation of an Engine's internal
// state. State generated by one engine, must be readable by another engine
// whose implementation details are unknown to the first. 

class State : public Serializable {
  public:
    typedef std::unordered_map<VId, Vector<Bits>>::const_iterator const_iterator;

    State() = default;
    ~State() override = default;

    void insert(VId id, const Bits& b);
    void insert(VId id, const Vector<Bits>& bs);

    const_iterator find(VId id) const;
    const_iterator begin() const;
    const_iterator end() const;

    void read(std::istream& is, size_t base);
    void write(std::ostream& os, size_t base) const;
    size_t deserialize(std::istream& is) override;
    size_t serialize(std::ostream& os) const override;

  private:
    std::unordered_map<VId, Vector<Bits>> state_; 
};

inline void State::insert(VId id, const Bits& b) {
  Vector<Bits> bs;
  bs.push_back(b);
  state_.insert(std::make_pair(id, bs));
}

inline void State::insert(VId id, const Vector<Bits>& bs) {
  state_.insert(std::make_pair(id, bs));
}

inline State::const_iterator State::find(VId id) const {
  return state_.find(id);
}

inline State::const_iterator State::begin() const {
  return state_.begin();
}

inline State::const_iterator State::end() const {
  return state_.end();
}

} // namespace cascade

#endif
